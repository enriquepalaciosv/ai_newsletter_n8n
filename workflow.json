{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "url": "https://www.artificialintelligence-news.com/feed/",
        "options": {}
      },
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1.2,
      "position": [
        -1328,
        -80
      ],
      "id": "d259d5f7-25f7-4590-a538-a07f9fea6754",
      "name": "AI News RSS"
    },
    {
      "parameters": {
        "url": "https://news.google.com/rss/search?q=llm&hl=en-US&gl=US&ceid=US:en",
        "options": {}
      },
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1.2,
      "position": [
        -1328,
        96
      ],
      "id": "68c8f587-ecce-42a2-9d52-400b4fabf652",
      "name": "Google News LLM"
    },
    {
      "parameters": {
        "url": "https://export.arxiv.org/rss/cs.AI",
        "options": {}
      },
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1.2,
      "position": [
        -1328,
        320
      ],
      "id": "c2aacc3d-de85-4a55-8607-b438021654cb",
      "name": "arXiv AI RSS"
    },
    {
      "parameters": {
        "jsCode": "// Process and clean RSS feed data\nconst items = $input.all();\nconst processedItems = [];\n\nfor (const item of items) {\n  const data = item.json;\n  \n  // Extract and clean the data\n  const processedItem = {\n    title: data.title || data.titleSnippet || 'No title',\n    url: data.link || data.url || '',\n    description: data.contentSnippet || data.description || '',\n    pubDate: data.pubDate || data.isoDate || new Date().toISOString(),\n    source: data.source || 'Unknown source',\n    guid: data.guid || data.id || '',\n    // Add source identification\n    feedSource: data.feedSource || 'Unknown feed'\n  };\n  \n  // Only include items with valid URLs\n  if (processedItem.url && processedItem.url.startsWith('http')) {\n    processedItems.push(processedItem);\n  }\n}\n\n// Remove duplicates based on URL\nconst uniqueItems = [];\nconst seenUrls = new Set();\n\nfor (const item of processedItems) {\n  if (!seenUrls.has(item.url)) {\n    seenUrls.add(item.url);\n    uniqueItems.push(item);\n  }\n}\n\n// Sort by publication date (most recent first)\nuniqueItems.sort((a, b) => new Date(b.pubDate) - new Date(a.pubDate));\n\n// Limit to the 20 most recent articles\nconst limitedItems = uniqueItems.slice(0, 20);\n\nreturn limitedItems.map(item => ({ json: item }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -864,
        96
      ],
      "id": "85df311f-81ce-49a4-ada1-7005c5ec0735",
      "name": "Process Articles"
    },
    {
      "parameters": {
        "maxItems": 3
      },
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        -656,
        96
      ],
      "id": "6fa191f6-1940-4189-ab6c-703a9bfd5306",
      "name": "Limit Articles"
    },
    {
      "parameters": {
        "jsCode": "// Prepare data for AI summary\nconst articles = $input.all().map(item => item.json);\n\n// Create a structured prompt for AI\nconst currentDate = new Date().toLocaleDateString('en-US', {\n  weekday: 'long',\n  year: 'numeric',\n  month: 'long',\n  day: 'numeric'\n});\n\nconst prompt = `You are an expert AI news editor creating a weekly AI newsletter for ${currentDate}.\n\nPlease analyze the following ${articles.length} AI-related articles and create a comprehensive newsletter with the following structure:\n\n1. **Executive Summary** (2-3 sentences highlighting the most important developments)\n2. **Key Developments** (3-4 key stories with brief explanations and links)\n3. **Research & Innovation** (Notable papers, models, or technical advances)\n4. **Industry News** (Business updates, partnerships, funding)\n5. **Quick Summaries** (Other interesting developments in bullet points)\n\nGuidelines:\n- Keep the newsletter concise but informative (aim for 800-1000 words)\n- Include direct links to sources using markdown format [title](url)\n- Group related stories together\n- Focus on developments that matter to practitioners, researchers, and AI enthusiasts\n- Avoid duplicate coverage of the same story\n- Use a professional but engaging tone\n- Include publication dates when relevant\n\nArticles to analyze:\n\n${articles.map((article, index) => `\n**Article ${index + 1}:**\n- Title: ${article.title}\n- URL: ${article.url}\n- Description: ${article.description}\n- Published: ${new Date(article.pubDate).toLocaleDateString()}\n- Source: ${article.source}\n`).join('\\n')}\n\nPlease create the newsletter in markdown format.`;\n\nreturn [{\n  json: {\n    prompt: prompt,\n    articleCount: articles.length,\n    articles: articles,\n    currentDate: currentDate\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -448,
        96
      ],
      "id": "a05a6d78-a1e4-4193-bf27-9bb105eb83bb",
      "name": "Prepare AI Prompt"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.prompt }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -240,
        96
      ],
      "id": "1fe1fe0e-834d-4c0b-900b-167a22b20cc7",
      "name": "AI Newsletter Generator",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// Process the AI-generated newsletter and add metadata\nconst aiOutput = $json.output || $json.text || '';\nconst metadata = $json;\n\n// Extract newsletter content\nconst newsletterContent = aiOutput;\n\n// Create the final newsletter object\nconst newsletter = {\n  content: newsletterContent,\n  metadata: {\n    generatedDate: new Date().toISOString(),\n    articleCount: metadata.articleCount || 0,\n    currentDate: metadata.currentDate || new Date().toLocaleDateString(),\n    wordCount: newsletterContent.split(' ').length,\n    characterCount: newsletterContent.length\n  },\n  // Also create HTML version for email\n  htmlContent: newsletterContent\n    .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>') // Bold\n    .replace(/\\*(.*?)\\*/g, '<em>$1</em>') // Italic\n    .replace(/\\[([^\\]]+)\\]\\(([^)]+)\\)/g, '<a href=\"$2\" target=\"_blank\">$1</a>') // Links\n    .replace(/\\n\\n/g, '</p><p>') // Paragraphs\n    .replace(/\\n/g, '<br>') // Line breaks\n    .replace(/^/, '<p>') // Start paragraph\n    .replace(/$/, '</p>') // End paragraph\n};\n\nreturn [{ json: newsletter }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        80,
        96
      ],
      "id": "479fa2d9-7877-46d3-8833-910404b1f235",
      "name": "Process Newsletter"
    },
    {
      "parameters": {
        "html": "={{ $json.htmlContent }}",
        "options": {}
      },
      "type": "n8n-nodes-base.markdown",
      "typeVersion": 1,
      "position": [
        272,
        96
      ],
      "id": "583499ab-8758-435a-9bbc-2053eb3e9502",
      "name": "Convert to HTML"
    },
    {
      "parameters": {
        "jsCode": "// Activate all RSS feeds\nreturn [\n  { json: { trigger: 'ai-news' } },\n  { json: { trigger: 'google-llm' } },\n  { json: { trigger: 'arxiv-ai' } }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1632,
        96
      ],
      "id": "5950e944-7a20-4ac0-a3d7-80e45d62bec1",
      "name": "Activate Feeds"
    },
    {
      "parameters": {
        "numberInputs": 3
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -1072,
        80
      ],
      "id": "d3efc965-bac1-404b-8b74-68f42ee156b1",
      "name": "Merge All Feeds"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-5",
          "mode": "list",
          "cachedResultName": "gpt-5"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -240,
        256
      ],
      "id": "1d8176a6-e579-4d3b-a6a7-d447b3e7c767",
      "name": "OpenAI GPT-5",
      "credentials": {
        "openAiApi": {
          "id": "SRdHSqXUqF37M8v9",
          "name": "OpenAi account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "fromEmail": "hansellrivera.77@gmail.com",
        "toEmail": "hansell.rivera@nicasource.com",
        "subject": "={{ 'NS Weekly AI Newsletter - ' + $json.metadata.currentDate }}",
        "html": "={{ $json.htmlContent }}",
        "options": {}
      },
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [
        464,
        96
      ],
      "id": "ddace28d-dd5a-4c30-be37-22d54847bc70",
      "name": "Send Newsletter Email",
      "webhookId": "5c359ab9-4087-46f8-80ae-6a1b1456af55",
      "credentials": {
        "smtp": {
          "id": "3sMmiBUjyuQA9tMQ",
          "name": "SMTP account"
        }
      },
      "onError": "continueRegularOutput"
    }
  ],
  "pinData": {},
  "connections": {
    "AI News RSS": {
      "main": [
        [
          {
            "node": "Merge All Feeds",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google News LLM": {
      "main": [
        [
          {
            "node": "Merge All Feeds",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "arXiv AI RSS": {
      "main": [
        [
          {
            "node": "Merge All Feeds",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Process Articles": {
      "main": [
        [
          {
            "node": "Limit Articles",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit Articles": {
      "main": [
        [
          {
            "node": "Prepare AI Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare AI Prompt": {
      "main": [
        [
          {
            "node": "AI Newsletter Generator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Newsletter Generator": {
      "main": [
        [
          {
            "node": "Process Newsletter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Newsletter": {
      "main": [
        [
          {
            "node": "Convert to HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to HTML": {
      "main": [
        [
          {
            "node": "Send Newsletter Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Activate Feeds": {
      "main": [
        [
          {
            "node": "AI News RSS",
            "type": "main",
            "index": 0
          },
          {
            "node": "Google News LLM",
            "type": "main",
            "index": 0
          },
          {
            "node": "arXiv AI RSS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge All Feeds": {
      "main": [
        [
          {
            "node": "Process Articles",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI GPT-5": {
      "ai_languageModel": [
        [
          {
            "node": "AI Newsletter Generator",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "14bf9bc0-c2dc-47e1-98c1-3e3bcd8b4c81",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "46402ab0c04eeb31d09e4db8942587a6cd95bccef12ba105c306680fbccbd509"
  },
  "id": "OZaJLCTtzNHVny0A",
  "tags": []
}
